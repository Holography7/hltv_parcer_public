Changelog hltv_parcer:

English:

0.6.2 alpha:
- Fixed a bug where the parser did not update some matches with the status "Teams unknown", information about which was actually updated.
- Slight improvement in the calculation of download progress at step 3.

0.6.1 alpha:
- Fixed a bug when the parser updated the current_team value to the wrong player at step 5.

0.6.0 alpha:
Almost complete refactoring of the source code and changes in the algorithm. This update can be called the most extensive, which is why it may 
contain a lot of bugs and malfunctions that did not manifest themselves in time for development.

* Now the parser uses a different algorithm:
1. Importing settings from a file.
2. If you need to update the database, an update will be performed. Please note that if you have a large database, the update will take a long 
time. Still it will take longer if you use proxies, which will be discussed later. From this version of the database, build versions older than 4
will not be updated. To update them, use previous versions of the parser (preferably 0.5.5 alpha).
3. If proxies are specified, the parser will check whether they are banned on HLTV or not. The parser will select the fastest proxy and work 
through it. The proxy will be discussed later.
4. The parser loads a list of upcoming matches. Each match contains information taken from the first page ( https://www.hltv.org/matches ).
Based on this data, the parser does the following:
- If a match is already uploaded to the database and the primary data matches the data from the database, it is removed from the list (it will not 
be updated). The exception is when there is not enough data in the database, in which case the match will be updated.
- The parser will not remove matches from the list where teams or players are unknown or their statistics status is unknown. It will load them,
but will indicate in the database what data is missing.
- The parser will not load matches where both teams are unknown, but will write some data about them to the database to update them in the future.
5. Parser will write that step 1 of 6 has started: updating existing matches. The parser now collects a little more data about the match, but
more information about the data will be mentioned in the paragraph about the database later. When loading each match, the parser generates URLs 
to team and player statistics. The object of the Parcer class has lists, where these URLs are written, but at this stage they will be written 
there if:
- The match is over
- Updated information about the player or team
It is also important to note that in this and the next step, the parser excludes duplicate URLs to statistics. As soon as the match information is
uploaded, it will be immediately written in the database.
6. Step 2 of 6: upload new matches. The stage is similar to the previous one, but there is a difference in writing URLs to statistics of players 
and teams: if the date of the last data upload was recently (less than a month ago) and later than the last match, these URLs will not be 
written, as they will be contain the same statistics (they didn't play any other matches, right?). If the match is new or a team that has not 
played for a long time is playing, URLs to their statistics will be saved.
7. 3 step 6: load statistics on the teams. In General, no changes, except that the parser now writes the update date to the database.
8. 4 step 6: load statistics on the players. Similar to the previous step.
9. 5 step 6: verify the location of players in current teams. The algorithm has not changed from the previous version.
10. step 6 of 6: dumping matches. This is so to speak, creating a "snapshot" of the match and data about statistics before matches, and then 
updating the result in them. Dumps are saved in a separate dump table. Only matches whose status is Match upcoming are recorded in this table 
(more on statuses later).

* Features of source code refactoring:
- A lot of work has been done to reduce the number of lines of code (1256 vs 1981 from version 0.5.5).
- The entire source code has been divided into separate files for each class to better navigate it.
- The source code now uses more "try" blocks, as well as creates its own exceptions. This greatly simplified the perception of code in classes
Match, Team, and Player, because now don't need to write a lot of "if" branches in them if something wrong on the page.
- The MapStats class was combined with the Team class, because when the code was reduced, it was too small to leave it as a separate class.
- Added a new Parcer class. It includes all the features of the parser that load data.
- The Program class became the father class, which includes all the methods that are often used when executing other classes. If you compare with
the old version, all the functions that should not have been inherited are mixed in Parcer, and Program is now responsible only for importing
the config.
- When refactoring, attention was paid to comments to make it a little easier to understand the code. Comments may not be present everywhere, but
they will be added as updates are made.
- Constructors of the Match, Team, and Player classes now load data from HLTV immediately. The data fields are also combined into a single data 
field. This made it easier to access data and reduce the number of unnecessary lines of code.

* Database features:
- The matches_upcoming and matches_completed tables are combined into 1 matches table. This was made possible by adding the status field, which
indicates whether the match is finished or not. Also, the Result_maps field was removed because it didn't make sense.
- Added a dump table that adds "snapshot" of matches. Let's say you saw the upcoming match and statistics on teams and players. All this data
is included in the "snapshot", and then the result is updated so that you can evaluate the impact of statistics on this match (this functionality
will probably not be added in the parser).
- The structure of the matches table now looks like this:

1 id - the ID of the match
2 title - title of the match
3 team_1_id - ID of team 1
4 team_2_id - ID of team 2
5 team_1_players_id - IDs of the players of team 1
6 team_2_players_id - IDs of the players the team 2
7 date - match date in the format yyyy-mm-dd hh:mm:ss.msmsms
8 tournament - the tournament in which the match is held
9 format - how many maps will be played in this match (bo1, bo2, bo3, bo5, bo7)
10 maps - list of maps that will be played in this match
11 status - match status for the parser. About the status a little later
12 result - the result of the match on each map
13 url - URL for the match

The status can take the following values:
- Match upcoming: the match has not started yet and all statistics about participating teams and players already written in the database.
- LIVE: the match is on.
- Match over: the match is over.
- Match postponed: the match is postponed.
- Teams unknown: both teams participating in the match are unknown
- Team [1 or 2] unknown: one of the teams in this match is unknown
- [1, 2, 3... 10] player(s) unknown: one or more players are unknown or have no statistics

- The dump table structure looks like this:
1-11 - repeating the structure of the matches table
12-277 - repeating the structure of the teams table without the first 2 and last 2 fields (only statistics and rating of 2 teams, 133 fields for 
each team)
278-528 - repeating the structure of the players table without the first 3 and last 2 fields (only statistics and rating of 10 players, 25 fields 
for each player)

- All field names have been reduced to lowercase for better understanding of SQL commands.
- For more information about the database structure, see the file DB_structure.py. Just do not think that this Is an unnecessary file - it is 
necessary!

* Features of the configuration file:
- Added setting of the log file name.
- Added configuration of the proxy server operation mode. When enabling this mode, you must specify 1 or more (comma-separated) IP addresses
proxy in square brackets below. Make sure that the proxies you enter are stable, fast, support HTTPS, and are not banned from HLTV. If
the connection to the proxy is unstable, recommend increasing the download_html_count_retries setting to 20. This setting can help you avoid 
being banned IP addresses of the machine running the parser, especially when updating a large database.
- Removed the repeat_mode setting that allowed you to leave the parser running automatically in a day. This Function was experimental and caused 
a lot of problems with the parser, so we decided to remove it.

* Other features:
- The parser shows the progress bar when it performs a database update or 1 of the steps of its main work. This progress bar is not writing in 
the log file.
- Previously, the parser displayed data "as is" as a tuple or list. Now it outputs a pseudo-table with data instead. Some tables look bulky, so 
I recommend that you expand the console's window to full screen for a better view. These tables are also duplicated in log file, but with a 
different tab formatting (4 characters per tab instead of 8). Because of this, pseudo-tables may not look right in some text editors 
(I recommend using Notepad++).
- Since the source code is divided into different files, you need to execute the file to run the parser run_parcer.py.
- Each time the parser starts, it backs up a new copy of the database with the date and time specified in the file name instead of replacing the backed-up database file. This should
allow you to track the time of unwanted changes, but it may take up a lot of disk space. Keep track of the number of backups and delete them in time!


0.5.6 alpha:
- Fixed a critical bug when loading player statistics, the parser ran into the value "NaN" and crashed when trying to convert it to a number.

0.5.5 alpha:
- Fixed a critical bug where when creating a new database, the version value took the previous value, which is why the parser thought that it should
update the database, then it crashed.

0.5.4 alpha:
- Small refactoring of the source code.

0.5.3 alpha:
- Update the parser due to changes on HLTV.

0.5.2 alpha:
- Now the log writes the date and time of the message.

0.5.1 alpha:
- Another attempt to fix a bug that caused the parser to crash when executing the infinite loading bugfix.

0.5.0 alpha:
- The parser now loads the name of the tournament of the match. This may take a long time to update the database
time.
- The parser now loads new team statistics (CT and T round win percent).
- Added a log file. If log_add_mode is disabled, the log is overwritten every time the parser is started. If you need to save the previous log,
you must enable log_add_mode in the config file. Enabling this setting is not recommended, as the log file can be huge.
- Added repeat_mode. It allows you to automatically run the parser exactly one day after completion. This mode can be enabled in
config file. This mode is experimental and may cause unexpected errors, so I don't recommend using it.
- The parser now writes information about the match, the team name and the player's nickname in the first steps of loading.
- Now the parser does not add matches where teams are still unknown to the download queue.
- Now the parser tries to reload the HTML if the download failed. The number of attempts can be specified in the config file in the parameter
download_count_retries (max 20). This change is part of a bug fix where the infinite loading bugfix caused the parser to crash.
- Cosmetic improvement of the config file




0.4.8 alpha:
- Fixed a bug with infinite loading.

0.4.7 alpha:
- The parser can no longer work with HLTV as a robot. Now it is forced to pretend to be a Chrome browser.

0.4.6 alpha:
- Slight improvement in the search algorithm for players on the match page.

0.4.5 alpha:
- Fixed a minor bug with the list of URLs for player statistics that needed to be updated.
- Fixed a bug when the parser crashed when meeting with TBD.

0.4.4 alpha:
Updating the parser due to changes on HLTV (CT and T round win percent values were added to the team statistics, and these columns will be added to the parser
in version 0.5.0 alpha).

0.4.3 alpha:
- Fixed a bug where the parser mistook TBA for a player.

0.4.2 alpha:
- Fixed a bug where the parser didn't stop downloading statistics if the last map was loaded incorrectly.

0.4.1 alpha:
- The order of updating matches now corresponds to their date.
- Fixed a critical bug when the parser did not check the number of players participating in the match.

0.4.0 alpha:
- Large refactoring of the source code: large methods are divided into small ones, and a new Program class has been added, where global methods are placed
both variables and all other classes are inheritors of the Program class.
- The table with team statistics has new columns that add statistics on maps that are on HLTV, but are not active
map pool. This is done to prepare for future changes to the active map pool.
- Added a configuration file. You can use this file to set the database name and select the maps that are in the active map pool.
Statistics on these maps will be loaded when the parser starts.
- The database is now automatically backed up after verification.
- When a player moves from one team to another, information about the former player was not updated in the database, which is why this player was considered as still
present in the team. Now the parser checks whether each player belongs to the team if it finds more than 5 people in the team. This one
the upload stage occurs after all upcoming matches are uploaded.
- In some cases, the parser may skip downloading the match if something went wrong during loading.
- Previously, to update the statistics of teams and players after matches played, the parser updated existing matches with these teams. Now
the parser updates the statistics of players and matches directly between the update stage and the loading of new matches, without additional updates of matches.




0.3.2, 0.3.3 alpha:
- Parser updates due to changes on HLTV.

0.3.1 alpha:
- Fixed a critical bug when the parser crashed when trying to find out record in the database.

0.3.0 alpha:
- Record IDs were uploaded from HLTV (you could see these IDs in the URL)
- Added database version control.
- Now the parser will ask the user to create a new database if the current database did not pass verification. The old database is not deleted, but saved with
ending _old.
- The parser now checks not only the presence of tables, but also the columns contained in them and their order.
- In some cases, the URL for the match was changed on the HLTV side. Now the parser consider this and changes the URL if a change is noticed.



0.2.10fx alpha:
- Fixed a bug when the parser crashed when trying to get an ID

0.2.10 alpha:
- Fixed a bug when the parser crashed when trying to load HTML failed
- Small refactoring of the source code

0.2.9 alpha:
- Update of the algorithm for collecting links to players in connection with the HLTV update

0.2.8 alpha:
- Adding missing comments to the source code
- Small refactoring of the source code

0.2.7 alpha:
- Added checking the database after its creation

0.2.6 alpha:
- Fixed a bug where a completed match was added to the queue of updated matches.

0.2.1 - 0.2.5 alpha:
- Various fixes and updates due to changes on HLTV

0.2.0 alpha:
* Code rewritten in OOP style:

- Added classes:
1. Database - DB class:
2. Map_stats - team statistics class on the map
3. Match - match class with information about it
4. Team - team class with information about it and statistics
5. Player - player class with information about it and statistics
- DB verification is implemented in the create method
- Uploaded data is saved in object fields.
- Every object (except Database) has get methods that return loaded data.

* Changes in the parser algorithm:
- The parser now does not reset the database connection until the Database object is deleted.
- If the database does not pass verification, the parser automatically deletes the corrupted database and creates a new one.
- In the previous version, a confirmation was required before each match download. You can now disable this feature if you refuse to run it
in debug mode.
- If the updated match is completed, the list of uploaded upcoming matches includes matches with the teams that played. This is necessary to
update statistics of the teams that played.
- If the updated match is canceled, it is deleted from the database.
- If the updated match is postponed, its update is skipped.
- Now the parser loads statistics not for all the time, but for the last 3 months.



Legacy (private repository):
* Parser algorithm:
1. The connection and checking the database. If the database does not exist, it is created again.
2. If in a DB there are records about the upcoming matches, to update the data (loading data on the matches)
3. Loading the list of upcoming matches and clearing it from existing ones in the database
4. Loading data about matches, participating teams and players (cycle for each match):
- Download match information, URL to information and statistics of teams and players
- Download team information and statistics for the last 3 months
- Download player information and statistics for the last 3 months
- Repeat the last 2 steps for the second team
- Recording the received data in the database
The loop may be interrupted if:
- At least 1 team participating in the match is unknown
- At least 1 player participating in the match is unknown
- Missing or incomplete statistics for at least 1 team (there must be statistics for at least 1 of the active pool maps)
- Missing or incomplete statistics for at least 1 player

* Database structure:
1. players:

1.1 ID - number of the player
1.2 Player - player's nickname
1.3 Current_team - name of the team that the player is a member of
1.4 - 1.27 - player statistics (example: https://www.hltv.org/stats/players/individual/484/Zeus )
1.28 Rating_2_0 - player rating
1.29 Link - the URL of the player

2. teams:

2.1 ID - number of the team
2.2 Team - the team name
2.3 Rating - the rating of the team
2.4 - 2.73 - team statistics on each map (example: https://www.hltv.org/stats/teams/map/32/4608/Natus%20Vincere for each map)
2.74 Link - team URL

3. matches_upcoming:

3.1 ID - match number
3.2 Team_1 - name of team 1
3.3 Team_2 - name of team 2
3.4 Date_match - match date in the format yyyy-mm-dd hh:mm:ss.msmsms
3.5 Format_match - how many maps are played in a match (bo1, bo2, bo3, bo5, bo7)
3.6 Maps - list of maps where the match will be played
3.7 Link - the URL of the match

4. matches_completed:

3.1 ID - match number
3.2 Team_1 - name of team 1
3.3 Team_2 - name of team 2
3.4 Date_match - match date in the format yyyy-mm-dd hh:mm:ss.msmsms
3.5 Format_match - how many maps are played in a match (bo1, bo2, bo3, bo5, bo7)
3.6 Maps - list of maps where the match will be played
3.7 Result_full - the result of a match on each map
3.8 Result_maps - total result of the match based on the maps won
3.9 Link - the URL of the match

* Features:
- The parser is written in a procedural style.
- There is a 1 second delay before loading any HTML.
- The parser asks for upload confirmation before each match.
- The database does not record data about matches where teams, players or their statistics are unknown.
- If a match is completed, it is written to matches_completed and removed from matches_upcoming.
- Data is updated by deleting the old record and inserting new ones, not via UPDATE.
- The parser initiates a connection to the database every time when data is written or deleted, and then closes the connection.
- In the teams table, team statistics are recorded on 7 maps from the active map pool. If the active pool changes, the parser will write to columns
statistics on this map are zero. You need to update the parser if the active map pool changes!
- The parser does not fully update the teams and players tables. It will only update the teams and players who will be playing the match.
- The parser does not consider stand-ins. If a player initially plays for another team, but in a match plays for another team as a stand-in, its value is
Current_team will not be changed.
- It happens that a player moves to another team, but on the HLTV side information about him is not updated. The parser does not take consider such cases.

Русский:

0.6.2 alpha:
- Исправлен баг, когда парсер не обновлял некоторые матчи со статусом "Teams unknown", информация о которых на самом деле обновилась.
- Небольшое улучшение расчёта прогресса загрузки на 3 этапе.

0.6.1 alpha:
- Исправлен баг, когда на 5 шаге работы парсер обновлял значение current_team не тому игроку.

0.6.0 alpha:
Практически полный рефакторинг исходного кода и изменения в алгоритме. Это обновление можно назвать самым масштабным, из-за чего может содержать
множество багов и неисправностей, которые не проявляли себя вовремя оразработки.

* Теперь парсер работает по другому алгоритму:
1. Импортирование настроек из файла.
2. Если требуется обновить БД, будет произведено обновление. Стоит учесть, что если у вас большая БД, то обновление займёт много времени. Ещё
больше времени оно займёт, если вы будете использовать прокси, о которых будет сказано позже. С этой версии БД версии билда старше 4 обновляться 
не будут, для их обновления используйте предыдущие версии парсера (желательно 0.5.5 alpha).
3. Если указаны прокси, парсер проверит забанены ли они на HLTV или нет. Парсер выберет самый быстрый прокси и будет работать через него. О прокси 
будет написано позже.
4. Парсер загружает список предстоящих матчей. Каждый матч содержит информацию, взятую с первой страницы ( https://www.hltv.org/matches ). На 
основе этих данных парсер делает следующее:
- Если матч уже загружен в БД и первичные данные совпадают с данными из БД, он удаляется из списка (не будет обновляться). Исключением являются
моменты, когда данных в БД не хватает, в этом случае матч будет обновлён
- Парсер не будет удалять из списка матчи, где команды или игроки или их статиcтика неизвестна. Он загрузит их, но укажет в БД о том каких данных 
не хватает.
- Парсер не будет загружать матчи, где незвестны обе команды, но запишет часть данных о них в БД, чтобы обновить их в будущем.
5. Далее парсер будет писать, что начался 1 шаг из 6: обновление существующих матчей. Парсер теперь собирает немного больше данных о матче, но 
подробнее о данных будет упомянуто в абзаце про БД позже. При загрузке каждого матча парсер генерирует URL'ы на статистику команды и игроков.
У объекта класса Parcer есть списки, куда записываются эти URL'ы, но на данном этапе они будут записаны туда, если:
- Матч окончен
- Обновилась информация об игроке или команде
Так же важно отметить, что в этом и следующем шаге парсер исключает дублирование URL'ов на статистики. Как только информация о матче будет 
загружена, она сразу будет записана в БД.
6. 2 шаг из 6: загрузка новых матчей. Этап схож с предыдущим, но здесь есть отличие в записи URL'ов на статистики игроков и команд: если дата
последней загрузки данных происходила недавно (меньше месяца назад) и позже последнего матча, то эти URL'ы не будут записаны, так как будут
содержать ту же статистику (ведь они не играли других матчей, верно?). Если матч новый или играет команда, которая уже давно не играла, URL'ы на
их статистики будут сохранены.
7. 3 шаг из 6: загрузка статистики о командах. В целом, никаких изменений, за тем исключением, что парсер теперь записыват в БД дату обновления.
8. 4 шаг из 6: загрузка статистики об игроках. Аналогична предыдущему шагу.
9. 5 шаг из 6: проверка нахождения игроков в текущих командах. Алгоритм не изменился с предыдущей версии.
10. 6 шаг из 6: дампинг матчей. Это так сказать создание "слепка" матча и данных о статистиках перед матчей, а затем обновление в них результата.
Дампы сохраняются в отдельную таблицу dump. В эту таблицу записываются только те матчи, чей статус Match upcoming (о статусах позже).

* Особенности рефакторинга исходного кода:
- Проведена большая работа по сокращению количества строк кода (1256 против 1981 из версии 0.5.5). 
- Весь исходный код стал разбит на отдельные файлы для каждого класса, чтобы лучше ориентироваться в нём.
- Исходный код теперь использует больше блоков "try", а так же создаёт собственные исключения. Это очень упростило восприятие кода в классах
Match, Team и Player, ведь теперь в них не нужно писать множество ветвей "if", если что-то на странице написано не так.
- Класс MapStats был совмещён с классом Team, так как при сокращении кода он оказался слишком маленьким, чтобы оставлять его как отдельный класс.
- Добавлен новый класс Parcer. В него вошли все функции парсера, которые загружают данные.
- Класс Program стал отцом-классом, в который вошли все методы, которые часто используются при исполнении других классов. Если сравнивать со
старой версией, то все функции, которые не должны были наследоваться, перемешены в Parcer, а Program теперь отвечает только за импортирование
конфига.
- При рефакторинге было уделено внимание комментариям, чтобы понимать код было немного проще. Возможно, комментарии присутствуют не везде, но по 
мере обновлений они буду дописываться.
- Конструкторы классов Match, Team и Player теперь сразу загружают данные с HLTV. Так же поля с данными объединены в единое поле data. Это позволило
упростить доступ к данным и сократить число ненужных строк кода.

* Особенности БД:
- Таблицы matches_upcoming и matches_completed объединены в 1 таблицу matches. Это стало возможно благодаря добавлению поля status, которое и
показывает на то закончен матч или нет. Также поле Result_maps было удалено, так как не имело смысла.
- Добавлена таблица dump, которая добавляет "слепки" матчей. Скажем, вы видели готовящийся матч и статистику на команды и игроков. Вся эти данные
входят в "слепок", а потом обновляется результат, чтобы можно было оценить влияние статистики на этот матч (такой функционал в парсере скорее
всего не будет добавлен).
- Страктура таблицы matches теперь выглядит так:

1 id - идентификатор матча
2 title - заглавие матча
3 team_1_id - идентификатор команды 1
4 team_2_id - идентификатор команды 2
5 team_1_players_id - идентификаторы игроков команды 1
6 team_2_players_id - идентификаторы игроков команды 2
7 date - дата матча в формате yyyy-mm-dd hh:mm:ss.msmsms
8 tournament - турнир, в рамках которого проводится матч
9 format - сколько карт будет сыграно в этом матче (bo1, bo2, bo3, bo5, bo7)
10 maps - список карт, которые будут играться на данном матче
11 status - статус матча для парсера. О статусах немного позже
12 result - результат матча на каждой карте
13 url - URL на матч

Статус может принимать следующие значения:
- Match upcoming: матч ещё не начался и вся статистика об учавствующих в них командах и игроках записана в БД.
- LIVE: матч идёт.
- Match over: матч окончен.
- Match postponed: матч отложен.
- Teams unknown: неизвестны обе команды, участвующие в матче
- Team [1 или 2] unknown: одна из команд данного матча неизвестна
- [1, 2, 3... 10] player(s) unknown: один или несколько игроков незвестны или у них отсутствует статистика

- Структура таблицы dump выглядит так:
1-11 - повторение структуры таблицы matches
12-277 - повторение структры таблицы teams без первых 2 и последних 2 полей (только статистика и рейтинг 2-х команд, по 133 поля на каждую команду)
278-528 - повторение структры таблицы players без первых 3 и последних 2 полей (только статистика и рейтинг 10 игроков, по 25 полей на каждого 
игрока)

- Все имена полей были приведены к нижнему регистру для лучшего восприятия SQL-команд.
- Подробнее структуру БД можно увидеть в файле DB_structure.py. Только не считаёте, что это ненужный файл - он нужный!

* Особенности конфигурационного файла:
- Добавлена настройка имени файла лога.
- Добавлена настройка режима работы через прокси-сервер. При включении этого режима вы должны указать 1 или несколько (через запятую) IP-адресов
прокси в квадратных скобках ниже. Убедитесь, что вводимые вами прокси работают стабильно, быстро, поддерживают HTTPS и не забанены на HLTV. Если
соединение с прокси нестабильно, рекомендуется увеличить настройку download_html_count_retries до 20. Данная настройка может помочь избежать бана 
IP-адреса машины, на которой запущен парсер, особенно это может потребоваться при обновлении большой БД.
- Убрана настройка repeat_mode, позволявшая оставить парсер, который автоматически будет запускаться через сутки. Эта Функция была
экспериментальной и вызывала много проблем при работе парсера, поэтому было решено её убрать.

* Другие особенности:
- Парсер демонстрирует прогресс бар, когда выполняет обновление БД или 1 из шагов его основной работы. Этот прогресс бар не записывается в лог 
файл.
- Раньше парсер выводил на экран данные "как есть" в виде кортежа или списка. Теперь вместо этого он выводит псевдо-таблицу с данными. Некоторые
таблицы выглядят громоздкими, поэтому для их лучшего вида рекомендуется развернуть окно консоли на весь экран. Эти таблицы так же дублируются в
лог файл, но с другим форматированием табуляций (4 символа на табуляцию вместо 8). Из-за этого в некоторых текстовых редакторах псевдо-таблицы
могут выглядеть неправильно (рекомендуется использовать Notepad++).
- Так как исходный код разбит на разные файлы, для запуска парсера нужно исполнять файл run_parcer.py.
- При каждом запуске парсер бекапирует новую копию БД с указанием даты и в времени в имени файлы вместо замены бекапируемого файла БД. Это должно
розволить отследить момент нежелательных изменений, но может занимать много места на диске. Следите за количеством бекапов и вовремя удаляйте их!



0.5.6 alpha:
- Исправлен критический баг, когда при загрузке статистики игрока парсер натыкался на значение "NaN" и падал при попытке преобразовать его в число.

0.5.5 alpha:
- Исправлен критический баг, когда при создании новой БД значение версии принимало предыдущее значение, из-за чего парсер думал, что нужно 
обновить БД, после чего падал.

0.5.4 alpha:
- Небольшой рефакторинг исходного кода.

0.5.3 alpha:
- Обновление парсера в связи с изменениями на HLTV.

0.5.2 alpha:
- Теперь лог пишет дату и время сообщения.

0.5.1 alpha:
- Ещё одна попытка исправить баг, который вызывал падение парсера при исполнении багфикса бесконечной загрузки.

0.5.0 alpha:
- Парсер теперь загружает название турнира, в рамках которого проводится или проводился матч. Обновление БД из-за этого может занять много 
времени.
- Парсер теперь загружает новую статистику команд (CT и T round win percent).
- Добавлен лог файл. При выключенном log_add_mode лог перезаписывается при каждом запуске парсера. Если нужно сохранить предыдущий лог, 
необходимо включить log_add_mode в конфиг файле. Включение этой настройки не рекомендуется, так как мфайл лога может быть огромным.
- Добавлен режим repeat_mode. Он позволяет автоматически запускать парсер ровно через сутки после завершения. Этот режим можно включить в 
конфиг файле. Режим экспериментальный и может вызвать непредвиденные ошибки, так что не рекомендуется его использовать.
- Парсер теперь пишет информацию о матче, название команды и никнейм игрока на первых шагах загрузки.
- Теперь парсер не добавляет в очередь на загрузку матчи, где команды ещё неизвестны.
- Теперь парсер пытается повторно загрузить HTML, если загрузка не удалась. Количество попыток можно указать в конфиг файле в параметре
download_count_retries (max 20). Это изменение является частью исправления бага, когда багфикс бесконечной загрузки вызывал падение парсера.
- Косметическое улучшение конфиг файла



0.4.8 alpha:
- Исправлен баг с бесконечной загрузкой.

0.4.7 alpha:
- Парсер больше не может работать с HLTV как робот. Теперь он вынужден притворяться браузером Chrome.

0.4.6 alpha:
- Небольшое улучшение в алгоритме поиска игроков на странице матча.

0.4.5 alpha:
- Исправлен незначительный баг со списком URL на статистику игроков, которую нужно было обновить.
- Исправлен баг когда парсер падал при встрече с TBD.

0.4.4 alpha:
Обновление парсера в связи с изменениями на HLTV (в статистику команд добавлены значения CT и T round win percent, в парсер эти колонки будут 
добавлены в версии 0.5.0 alpha).

0.4.3 alpha:
- Исправлен баг, когда парсер принимал TBA за игрока.

0.4.2 alpha:
- Исправлен баг когда парсер не прерывал загрузку статистики, если загрузка последней карты была провалена.

0.4.1 alpha:
- Порядок обновления матчей теперь соответсвует их дате.
- Исправлен критический баг когда парсер не проверял количество игроков, участвующих в матче.

0.4.0 alpha:
- Большой рефакторинг исходного кода: большие методы разбиты на маленькие, добавлен новый класс Program, в который помещены глобальные методы 
и переменные, все остальные классы стали наследниками класса Program.
- В таблице со статистикой команд появились новые столбцы, добавляющие статистику на картах, которые есть на HLTV, но не находятся в активном
маппуле. Это сделано, чтобы подготовиться к будущему изменению активного маппула.
- Добавлен конфигурационный файл. Этот файл можно использовать для задавания имени БД и выбрать карты, которые находятся в активном маппуле.
Статистика на этих картах будет загружаться при запуске парсера.
- БД теперь автоматически бекапируется после проверки.
- Когда игрок переходит из одной команды в другую, в БД информация о бывшем игроке не обновлялась, из-за чего этот игрок считался как всё ещё
присутствующий в команде. Теперь парсер проверяет принадлежность каждого игрока к команде, если обнаружит больше 5 человек в команде. Этот
этап загрузки происходит после загрузки всех предстоящих матчей.
- В некоторых случаях парсер может пропустить загрузку матча, если вовремя загрузки что-то пошло не так.
- Раньше для обновления статистики команд и игроков после сгранных матчей парсер переобновлял уже существующие матчи с этими командами. Теперь
парсер между этапом обновления и загрузки новых матчей обновляет статистику игроков и матчей напрямую, без дополнительного обновления матчей.



0.3.2, 0.3.3 alpha:
- Обновления парсера в связи с изменениеями на HLTV.

0.3.1 alpha:
- Исправлен критический баг когда парсер падал при попытке узнать находится ли запись в БД.

0.3.0 alpha:
- ID записей стали загружаться с HLTV (эти ID можно было заметить в URL)
- Добавлен контроль версий БД.
- Теперь парсер попросит пользователя создать новую БД, если текущая БД не прошла проверку. Старая БД не удаляется, а сохраняется с 
окончанием _old.
- Парсер теперь проверяет не только наличие таблиц, но и содержащиеся в них колонки и их порядок.
- В некоторых случаях URL на матч менялся на стороне HLTV. Теперь парсер учитывает это и меняет URL, если замечено изменение.



0.2.10fx alpha:
- Исправлен баг когда парсер падал при неудачной попытке получить ID

0.2.10 alpha:
- Исправлен баг когда парсер падал при проваленой попытке загрузить HTML
- Небольшой рефакторинг исходного кода

0.2.9 alpha:
- Обновление алгоритма сбора ссылок на игроков в связи с обновлением HLTV

0.2.8 alpha:
- Добавление недостающих комментариев в исходный код
- Небольшой рефакторинг исходного кода

0.2.7 alpha:
- Добавлена проверка БД после её создания

0.2.6 alpha:
- Исправлен баг, когда в очередь обновляемых матчей добавлялся завершённый матч.

0.2.1 - 0.2.5 alpha:
- Различные исправления и обновления в связи с изменениями на HLTV

0.2.0 alpha:
* Код переписан в стиль ООП:

- Добавлены классы:
1. Database - класс БД:
2. Map_stats - класс статистики команды на карте
3. Match - класс матча с информацией о нём
4. Team - класс команды с информацией о нёй и статистикой
5. Player - класс игрока с информацией о нём и статистикой
- Проверка БД внедрена в метод create
- Загружаемые данные сохраняются в поля объектов.
- У каждого объекта (кроме Database) есть методы get, которые возвращают загруженные данные.

* Изменения в алгоритме парсера:
- Парсер теперь не сбрасывает соединение с БД до тех пор, пока не удалён объект Database.
- Если БД не проходит проверку, парсер автоматически удаляет повреждённую БД и создаёт новую.
- В предыдущей версии перед каждой загрузкой матча требовалось подтверждение. Теперь эту функцию можно отключить, если отказаться от запуска 
в debug mode.
- Если обновляемый матч завершён, в список загружаемых предстоящих матчей добавляются матчи с участием сыгравших команд. Это нужно, чтобы 
обновить статистику сыгравших команд.
- Если обновляемый матч отменён, он удаляется из БД.
- Если обновляемый матч отложен, его обновление пропускается.
- Теперь парсер загружает на статистику не за всё время, а за последние 3 месяца.



Legacy (private repository):
* Алгоритм парсера:
1. Подключение и проверка БД. Если БД не существует, она создаётся заново.
2. Если в БД есть записи о предстоящих матчах, обновить эти данные (загрузка данных о матчах)
3. Загрузка списка предстоящих матчей и его очистка от существующих в БД
4. Загрузка данных о матчах, учавствующих в них командах и игроках (цикл для каждого матча):
- Загрузка информации о матче, URL на информацию и статистику команд и игроков
- Загрузка информации и статистики команды за последние 3 месяца
- Загрузка информации и статистики игроков за последние 3 месяца
- Повторение последних 2 шагов для второй команды
- Запись полученных данных в БД
Цикл может прерваться, если:
- Неизвестна хотя бы 1 команда, участвующая в матча
- Неизвестен хотя бы 1 игрок, участвующий в матче
- Отсутствует или загружена неполная статистика хотя бы 1 команды (должна быть статистика хотя бы на 1 из карт активного пула)
- Отсутствует или загружена неполная статистика хотя бы 1 игрока

* Структура БД:
1. players:

1.1 ID - номер игрока
1.2 Player - никнейм игрока
1.3 Current_team - имя команды, в которой игрок состоит
1.4 - 1.27 - статистика игрока (пример: https://www.hltv.org/stats/players/individual/484/Zeus )
1.28 Rating_2_0 - рейтинг игрока
1.29 Link - URL игрока

2. teams:

2.1 ID - номер команды
2.2 Team - имя команды
2.3 Rating - рейтинг команды
2.4 - 2.73 - статистика команды на каждой карте (пример: https://www.hltv.org/stats/teams/map/32/4608/Natus%20Vincere для каждой карты)
2.74 Link - URL команды

3. matches_upcoming:

3.1 ID - номер матча
3.2 Team_1 - имя команды 1
3.3 Team_2 - имя команды 2
3.4 Date_match - дата матча в формате yyyy-mm-dd hh:mm:ss.msmsms
3.5 Format_match - сколько карт играется в матче (bo1, bo2, bo3, bo5, bo7)
3.6 Maps - список карт, на которых будет проводиться матч
3.7 Link - URL матча

4. matches_completed:

3.1 ID - номер матча
3.2 Team_1 - имя команды 1
3.3 Team_2 - имя команды 2
3.4 Date_match - дата матча в формате yyyy-mm-dd hh:mm:ss.msmsms
3.5 Format_match - сколько карт играется в матче (bo1, bo2, bo3, bo5, bo7)
3.6 Maps - список карт, на которых будет проводиться матч
3.7 Result_full - результат матча на каждой карте
3.8 Result_maps - общий результат матча по выигранным картам
3.9 Link - URL матча

* Особенности:
- The parser is written in a procedural style.
- Перед загрузкой любого HTML существует задержка в 1 секунду.
- Парсер просит подверждение загрузки перед каждым матчем.
- В БД не записываются данные о матчах, где команды, игроки или их статистика неизвестна.
- Если матч завершён, он записывается в matches_completed и удаляется из matches_upcoming.
- Обновление данных происходит удалением старой записи и вставкой новых, а не через UPDATE.
- Парсер инициирует соединение с БД каждый раз, когда записываются или удаляются данные, после чего закрывает соединение.
- В таблице teams статистика команд записывается на 7 картах из активного маппула. Если активный пул изменится, парсер будет записывать в столбцы
статистики на этой карте нули. Необходиом обновление парсера в случае изменения активного маппула!
- Парсер не обновляет полностью таблицы teams и players. Он будет обновлять только те команды и игроков, которым предстоит играть матч.
- Парсер не учитывает stand-ins. Если игрок изначально играет в другой команде, а в матче играет за другую команду как stand-in, его значение
Current_team не будет изменено.
- Бывает так, что игрок переходит в другую команду, но на стороне HLTV информация о нём не обновлена. Парсер не учитывает такие случаи.